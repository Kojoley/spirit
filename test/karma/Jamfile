#==============================================================================
#   Copyright (c) 2001-2013 Joel de Guzman
#   Copyright (c) 2001-2012 Hartmut Kaiser
#   Copyright (c)      2011 Bryce Lelbach
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================

# bring in rules for testing
import testing ;
import modules ;
import feature ;

###############################################################################
project spirit_v2x/test/karma
    : requirements
        <include>.
        <toolset>gcc:<cxxflags>-ftemplate-depth-512
        <toolset>clang:<cxxflags>-ftemplate-depth-512
        <toolset>darwin:<cxxflags>-ftemplate-depth-512
    :
    :
    ;

tests = ;

rule run ( sources + : args * : input-files * : requirements * : target-name ? :  default-build * )
{
    target-name ?= $(sources[1]:D=:S=) ;
    tests += [ testing.run $(sources) : $(args)
      : $(input-files) : $(requirements) : $(target-name)-p3 : $(default-build) ] ;
}

rule compile ( sources + : requirements * : target-name ? )
{
    target-name ?= $(sources[1]:D=:S=) ;
    tests += [ testing.compile $(sources) : $(requirements) : $(target-name)-p3 ] ;
}

rule compile-fail ( sources + : requirements * : target-name ? )
{
    target-name ?= $(sources[1]:D=:S=) ;
    tests += [ testing.compile-fail $(sources) : $(requirements) : $(target-name)-p3 ] ;
}

###############################################################################

{
    ###########################################################################
    test-suite spirit_v2/karma :

     [ compile-fail grammar_fail.cpp         : : karma_grammar_fail ]
     [ compile-fail rule_fail.cpp            : : karma_rule_fail ]
     [ run actions.cpp                   : : : : karma_actions ]
     [ run alternative1.cpp              : : : : karma_alternative1 ]
     [ run alternative2.cpp              : : : : karma_alternative2 ]
     [ run and_predicate.cpp             : : : : karma_and_predicate ]
     [ run attribute.cpp                 : : : : karma_attribute ]
     [ run auto1.cpp                     : : : : karma_auto1 ]
     [ run auto2.cpp                     : : : : karma_auto2 ]
     [ run auto3.cpp                     : : : : karma_auto3 ]
     [ run binary1.cpp                   : : : : karma_binary1 ]
     [ run binary2.cpp                   : : : : karma_binary2 ]
     [ run binary3.cpp                   : : : : karma_binary3 ]
     [ run bool.cpp                      : : : : karma_bool ]
     [ run buffer.cpp                    : : : : karma_buffer ]
     [ run case_handling1.cpp            : : : : karma_case_handling1 ]
     [ run case_handling2.cpp            : : : : karma_case_handling2 ]
     [ run case_handling3.cpp            : : : : karma_case_handling3 ]
     [ run center_alignment.cpp          : : : : karma_center_alignment ]
     [ run char1.cpp                     : : : : karma_char1 ]
     [ run char2.cpp                     : : : : karma_char2 ]
     [ run char3.cpp                     : : : : karma_char3 ]
     [ run char_class.cpp                : : : : karma_char_class ]
     [ run columns.cpp                   : : : : karma_columns ]
     [ run debug.cpp                     : : : : karma_debug ]
     [ run delimiter.cpp                 : : : : karma_delimiter ]
     [ run duplicate.cpp                 : : : : karma_duplicate ]
     [ run encoding.cpp                  : : : : karma_encoding ]
     [ run eol.cpp                       : : : : karma_eol ]
     [ run eps.cpp                       : : : : karma_eps ]
     [ run format_manip.cpp              : : : : karma_format_manip ]
     [ run format_manip_attr.cpp         : : : : karma_format_manip_attr ]
     [ run format_pointer_container.cpp  : : : : karma_format_pointer_container ]
     [ run generate_attr.cpp             : : : : karma_generate_attr ]
     [ run grammar.cpp                   : : : : karma_grammar ]
     [ run int1.cpp                      : : : : karma_int1 ]
     [ run int2.cpp                      : : : : karma_int2 ]
     [ run int3.cpp                      : : : : karma_int3 ]
     [ run kleene.cpp                    : : : : karma_kleene ]
     [ run lazy.cpp                      : : : : karma_lazy ]
     [ run left_alignment.cpp            : : : : karma_left_alignment ]
     [ run list.cpp                      : : : : karma_list ]
     [ run lit.cpp                       : : : : karma_lit ]
     [ run maxwidth.cpp                  : : : : karma_maxwidth ]
     [ run not_predicate.cpp             : : : : karma_not_predicate ]
     [ run omit.cpp                      : : : : karma_omit ]
     [ run optional.cpp                  : : : : karma_optional ]
     [ run pattern1.cpp                  : : : : karma_pattern1 ]
     [ run pattern2.cpp                  : : : : karma_pattern2 ]
     [ run pattern3.cpp                  : : : : karma_pattern3 ]
     [ run pattern4.cpp                  : : : : karma_pattern4 ]
     [ run plus.cpp                      : : : : karma_plus ]
     [ run real1.cpp                     : : : : karma_real1 ]
     [ run real2.cpp                     : : : : karma_real2 ]
     [ run real3.cpp                     : : : : karma_real3 ]
     [ run repeat1.cpp                   : : : : karma_repeat1 ]
     [ run repeat2.cpp                   : : : : karma_repeat2 ]
     [ run right_alignment.cpp           : : : : karma_right_alignment ]
     [ run sequence1.cpp                 : : : : karma_sequence1 ]
     [ run sequence2.cpp                 : : : : karma_sequence2 ]
     [ run stream.cpp                    : : : : karma_stream ]
     [ run symbols1.cpp                  : : : : karma_symbols1 ]
     [ run symbols2.cpp                  : : : : karma_symbols2 ]
     [ run symbols3.cpp                  : : : : karma_symbols3 ]
     [ run tricky_alignment.cpp          : : : : karma_tricky_alignment ]
     [ run uint_radix.cpp                : : : : karma_uint_radix ]
     [ run utree1.cpp                    : : : : karma_utree1 ]
     [ run utree2.cpp                    : : : : karma_utree2 ]
     [ run utree3.cpp                    : : : : karma_utree3 ]
     [ run wstream.cpp                   : : : : karma_wstream ]

    ;

    ###########################################################################
    test-suite spirit_v2/karma_regressions :

     [ compile regression_const_real_policies.cpp    : :  regression_const_real_policies ]

     [ run regression_adapt_adt.cpp                  : : : :  karma_regression_adapt_adt ]
     [ run regression_optional_double.cpp            : : : :  karma_regression_optional_double ]
     [ run regression_semantic_action_attribute.cpp  : : : :  karma_regression_semantic_action_attribute ]
     [ run regression_real_scientific.cpp            : : : :  karma_regression_real_scientific ]
     [ run regression_center_alignment.cpp           : : : :  karma_regression_center_alignment ]
     [ run regression_container_variant_sequence.cpp : : : :  karma_regression_container_variant_sequence ]
     [ run regression_real_0.cpp                     : : : :  karma_regression_real_0 ]
     [ run regression_unicode_char.cpp               : : : :  karma_regression_unicode_char ]
     [ run regression_iterator.cpp                   : : : :  karma_regression_iterator ]

    ;

}
