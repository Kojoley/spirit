#==============================================================================
#   Copyright (c) 2001-2013 Joel de Guzman
#   Copyright (c) 2001-2012 Hartmut Kaiser
#   Copyright (c)      2011 Bryce Lelbach
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================

import config : requires ;
import modules ;
import feature ;
import testing ;

###############################################################################

project spirit-x3
    : requirements
        <include>.
        <c++-template-depth>512
        [ requires
            # Assume all the cxx11 checks succeed if any of cxx14 does.
            #cxx14_binary_literals               # grep -Er "[0-9]+b[0-9]+" *
            #cxx14_constexpr
            cxx14_decltype_auto                 # grep -r "decltype(auto)" *
            #cxx14_digit_separators              # grep -Er "[0-9]+'[0-9]+" *
            cxx14_generic_lambdas               # grep -Er "]\s*\\([^\\)]*auto" *
            #cxx14_hdr_shared_mutex              # grep -r "shared_mutex" *
            #cxx14_initialized_lambda_captures   # grep -Er "\\[[^=\\]]+=" *
            #cxx14_aggregate_nsdmi
            cxx14_return_type_deduction         # grep -Er "auto[^\\(=\\)]+\(" *
            #cxx14_std_exchange                  # grep -r "exchange" *
            #cxx14_variable_templates
        ]
    ;

###############################################################################

local subproject-name = x3 ;

rule run ( sources + : args * : input-files *
         : requirements * : target-name ? : default-build * )
{
    target-name ?= $(subproject-name)_$(sources[1]:D=:S=) ;
    return [ testing.run $(sources) : $(args) : $(input-files)
           : $(requirements) : $(target-name) : $(default-build) ] ;
}

rule compile ( sources + : requirements * : target-name ? )
{
    target-name ?= $(subproject-name)_$(sources[1]:D=:S=) ;
    return [ testing.compile $(sources)
           : $(requirements) : $(target-name) ] ;
}

rule compile-fail ( sources + : requirements * : target-name ? )
{
    target-name ?= $(subproject-name)_$(sources[1]:D=:S=) ;
    return [ testing.compile-fail $(sources)
           : $(requirements) : $(target-name) ] ;
}

###############################################################################

run actions.cpp ;
run alternative.cpp ;
run and_predicate.cpp ;
